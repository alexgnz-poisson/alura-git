Sistemas de control de version a parte de Git
-CVS
-SVN
-Mercurial
-GIT 

Ahora que entendemos para qué sirve un VCS (Sistema de Control de 
Versiones), podemos continuar con esta capacitación, pero solo 
para asegurarnos...

¿Cuáles de las siguientes afirmaciones sobre Git son correctas?

Nos deja organizar el trabajo en equipo, manteniendo los cambios en 
los archivos en un servidor especifico para especifico.
Git nos permite almacenar los cambios realizados en cada archivo en un
servidor propio para eso, toda la gestion de cambios la realiza Git
y solo debemos preocuparnos por crear un codigo que funcione y no 
por quien lo cambio antes.

Permite el almacenamiento y acceso a una historia de cambios.
Cada cambio se registra en un historial y se puede ver y restaurar
en cualquier momento.


Comandos Basicos 

--cd ayuda a buscar entre carpetas

--ls, enlista los archivos que tenemos en las carpetas

--dir abre nuestro directorio 

--git init esto iniciara un repositorio en git, todas las modificaciones
dentro de esta carpeta git podra mostrar cambios, cuando, y quien

--git status comando que sirve para saber los cambios realizados y saber
el estado en elq ue estan los archivos dentro del repositorio

--git add agrega el archivo para que lo registre. 


¿Cómo hacemos que Git vea una carpeta en particular como un repositorio
 y observe los cambios en sus archivos?

git init inicializa un repositorio en el directorio donde se 
ejecuta el comando. Desde este comando, Git podrá administrar 
los cambios realizados en los archivos.

--git add . agrega todos los archivos de las carpetas que tenemos 

--git rm --cached <file>..." esto sirve para que deje de monitorear
los cambios 

---git commit -m " " sirve para guardar los cambios realizados en el archivo
con un mensaje como buena practica de programacion. 

Al ejecutar el comando git status, recibimos información que puede
no ser tan clara, especialmente cuando nos encontramos con términos
como HEAD, working tree, index, etc.

Solo para aclarar un poco, ya que entenderemos mejor cómo funciona
Git durante el curso, aquí hay algunas definiciones interesantes:

HEAD: Estado actual de nuestro código, es decir, donde nos 
colocó Git

Working tree: Lugar donde los archivos realmente están siendo 
almacenados

index: Lugar donde Git almacena lo que será commiteado, es decir, 
la ubicación entre el working tree y el repositorio de Git en sí.


 ---git log , este comando muestra el hash del commit, que es una id para 
 ese comit, branch (head->master) nos indica donde estaamos parados en
 el proyecto .
 Luego muestra el auto, email, fecha y mensaje 

 --Comando --git log --oneline con esto vemos un resumen del hash,en cual
 branch fue colocado y el mensaje del commit 

 Ahora si quisieramos ver las modificaciones de los archivos lo podemos
 ver usando
 git log -p

-- git log --pretty="format:%H" nos muestra los hash de cada uno de los 
 commits 

 --git log --pretty="format:%h %s" este agrega el hash y el mensaje del
 commit 

 --git log --pretty="format:%h %s %ae" este agrega el mensaje del commit
 y el correo, importante saber esto 


¿Cómo podemos definir el nombre de la persona que ejecuta commits
en elrepositorio local actual?

--git config --local user.name "Nombre de la persona"

Ignorando archivos 

--git ignore sirve para ignorar archivos por lo tanto re pone en un
documento a parte y se pone .gitignore y ahi se pone lo que queremos
ignorar /carpeta 
        a.config

Generando commit. cuando usarlo en reglas generales
NUNCA HAY QUE HACER UN COMMIT EN UN CODIGO QUE NO FUNCIONA 

Deberíamos generar un commit siempre que nuestra base de código
esté en un estado que nos gustaría recordar.

REPOSITORIOS REMOTOS. 

 Para crear carpetas se usa el mkdir y el nombre que le querramos 
 poner a nuestra carpeta 

 --git init --bare Esto indica que este repositorio es puro. Solo contiene
 las modificaciones de los archivos 

Servidor remoto 
Para agregar un servidor remoto a nuestro servidor local 
-- git remote add servidorlocal C:\Users\alexa\Escritorio\Oracle_Curso\GitHub\servidor

Por si alguno se equivo en la ruta se hace lo siguientes
--git remote -v  esto mostrara la ruta despues unos parentesis
(fetch) : significa el lugar donde nostros vamos a obtener la informacion
del servidor remoto 
(push) lugar al que nostros vamos a enviar informacion 


Obtener datos del repositorio esta accion se llama clonar.
parra eso creamos otra carpeta con el nomcre de Alex de ejemplo 

--$ git clone /c/Users/alexa/Escritorio/Oracle_Curso/GitHub/servidor/ proyecto

sOLO SE HIZO UNA CONECCION AL ARCHIVO AHORITA VEREMOS COMO ENVIAR 
DATOS EN NUESTRO SERVIDOR REMOTO 


¿Cómo hicimos para definir un repositorio Git en este caso?
--git init --bare
Con este comando creamos un repositorio que no tendrá la working
tree, o sea, no contendrá una copia de nuestros archivos. Como
el repositorio servirá solo como servidor, para que otros miembros 
del equipo sincronicen sus trabajos, disminuimos espacio de 
almacenamiento de esta forma.

¿Cómo agregamos este enlace entre los repositorios?

git remote add nombre-repositorio camino/del/repositorio

 De esta forma tendremos un link de nuestro repositorio local 
 con el repositorio remoto, que llamamos de nombre-repositorio, 
 que está almacenado en camino/del/repositorio.


Ayuda a poder empujar los datos de nuestro servidor al repositorio
clonado que hicimos arriba
 --git push servidorlocal master

 de ahi meterse a la carpeta que creamos de un supuesto usuario 
 el nombre es Eva 

cd Eva/proyecto/ 
ls
Usamos el siguiente Comando
--git remote al dar enter nos sale 
origin
vamos a utilizar el comando --git remote rename origin local
para renombrar lo unico que cambia
el origin por un local ahora de local a servido local 
-- git remote rename local servidorlocal

-------------------REPASAR BIEN COMO HACER ESO DE LOS CLONES

Ahora en la carpeta que creamos Eva, en el VsCode  editamos una linea
en la terminal ponemos --git status y ahi nos saldra que se modifico 
el index.html 
luego ponemos  --git add index.html 
y luego --$ git commit -m "Renombrando Curso de integracion continua"
y luego 
--git push servidorlocal master y con tdas estas lineas se envio al 
servidor para que alex pudiese ver los cambios
Salimos de la carpeta eva y entramos a la de alex 
luego
--git pull servidorlocal master 
---------Recuerdo-------------
--git log -p El comando git log nos muestra todo el historial 
de cambios de un proyecto pero 
-------------------------------


Además de agregar repositorios remotos para sincronizar los datos, 
vimos que git clone trae un repositorio remoto a nuestra computadora
creando un repositorio local.

Al modificar el código en nuestro repositorio local, 
¿cómo enviamos las modificaciones a el repositorio remoto?

------git push [repositorio] master-----------

De esta forma enviamos las modificaciones de nuestra Branch master 
(hablaremos más sobre branches dentro de poco) hacia el repositorio 
remoto. Basta con substituir [repositorio] por el nombre que dimos 
al repositorio al agregarlo. Ahora, para traer los datos que están 
en el repositorio remoto, podemos utilizar git pull [repositorio] 
master.

SERVIDORES GRATUITOS GitHub nos permite crear repositorios git en 
internet 
Creamos un repositorio en github, al crearlo hasta abajo nos aparece
si queremos creaar un nuevo repositorio desde git
o en tal caso de que queramos subir un repositorio que ya tenemos 
con push 
Y nosotros vamos a hacer esto 
--git remote add origin https://github.com/alexgnz-poisson/alura-git.git
--git branch -M main
--git push -u origin main --el u significa que cada vez que hagamos 
un git push de nuestra brach master siempre ira a master 


----------NOTA---------------
Se hizo prueba en git, creando un archivo y editandolo, para esto 
al crear nuestro repositiorio en github, despues en la git bash con 
git init y todo eso que vimos creamos nuestro repositiorio , agregamos
archivos y etc, despues usamos esto
--git remote add origin https://github.com/alexgnz-poisson/alura-git.git
despues 
--git push origin master 
con esto en github actualizando ya se ven nuestros commits hechos y asi 
si queremos actualizar mas bien agregarles commits se hace asi
se edita el archivo, se guarda el commit, y despues para que se vea
reflejado en github hacemos 
--git push origin master  y despues f5 en el github y asi vera el
nuevo commit 

------------------------------

-----Trabajando en Equipo ---------
        Branches 
Para ver en cual branch estamos usamos el siguiente comando 
--git branch y nos muestra que estamos en la brach master

Para crear una nueva branch usamos lo siguiente
--git branch titulo 
con esto se crea una branch llamada titulo , despues para estar en
la nueva branch que hicimos hacemos el siguiente comando 
--git checkout titulo, esto nos mandara la nueva branch llamada titulo

NOTA LAS NOTAS BUENAS ESTAN EN TITULO AL PARECER EN EL BRACH 

Comando interesante para poder trabajar con los branch es
---git checkout -b lista 

vamos a ver como enviar datos de otras branch a la branch master 

Las branches ("ramas") se utilizan para desarrollar funcionalidades 
aisladas entre sí. La branch master es la branch "predeterminada" 
cuando creas un repositorio.

-git merge titulo, donde el titulo es el brench que estamos trayendo
a la rama master. 

¿Cómo podemos hacer el merge de la Branch titulo hacia la 
Branch master?

--git checkout master
y

--git merge titulo
De esta forma colocaremos el HEAD en la Branch master, o sea, 
haremos que nuestro código esté en el estado que lo dejamos con el 
últimocommit en master. Después, uniremos el trabajo de la Branch 
titulo con la Branch actual (master).

------------checar git merge y git rebase -----
Ahora haremos sera actualizar los commits de master con los commits de 
titulo . 
luego usamos el --git rebase pero no entendi muy bien eso pero segun
google te permite cambiar fácilmente una serie de confirmaciones, 
modificando el historial de tu repositorio

En este escenario, ¿cuál es la diferencia entre los comandos
rebase y merge?

El merge junta los trabajos y genera un merge commit. El rebase 
aplica los commits de otra Branch en la Branch actual.
Con esto evitamos los commits de merge. Hay una larga discusión 
sobre lo que es “mejor”: rebase o merge; Estudie, busque, y 
genere sus propias conclusiones

un comando para salir del git rebase es
--git rebase --abort 

-----------CTRL + Z-------------
Aqui confuguramos estando dentro de Eva/proyecto .
usando
--git config --local user.name "eva" y esto lo hicimos par ver el
nombre de quyien lo editara en esta caso solo son 2 editores alex 
y eva 

Una manera de omitir lo que se borro y asi con comandos de git es
-- git restore "nombre archcivo . con esto el cambio que hicimos 
ya no estara. 

Y por ejemplo si ya en nuestra terminal por ejemplo editamo una archivos
hicimos el --git add y luego un git status para ver el estado.
si no nostros ya tenemos cambios hecho y quisieramos volver para atras
en el reposito hacemos lo siguiente 

git restore --staged index.html(nombre archivo)

Ahora veremos como dar un control +z a un commit que ya hicimos 

--git log luego enter y este nos mostrara los hash de los commits
que hemos hecho copiamos el que querramos borrar

luego --git revert y pegamos el commit que copiamos anteriormente 

y creara un nuevo commit deshaciendo el commit anterior y si estamos
de acuerdo con el mensaje del nuevo commit vamos a apretar :X

luego git log y veremos lo siguiente el commit que revierte el commit

¿Cuáles comandos, respectivamente, deshacen modificaciones antes de 
agregarlas (1), después de agregarlas, pero antes de commitearlas 
(2), y después de realizar el commit (3)?

1 - git restore

2 - git restore --staged

3 - git revert

Con el git restore deshacemos una modificación que aún no fue 
agregada al index o stage, o sea, antes de hacer git add. Después 
de agregar con git add, para deshacer una modificación, necesitamos 
sacarlo de este estado, con git restore --staged. Ahora, si ya 
hicimos el commit, el comando git revert puede salvarnos

-----------guardando temporarmente-------------
Vimos cómo podemos utilizar --git stash para almacenar temporalmente 
algunas de nuestras modificaciones.

¿En qué momento el stash es útil?
Cuando necesitamos parar en el medio del desarrollo de algo, para 
poder hacer otra cosa.
Cuando necesitamos pausar el desarrollo de alguna funcionalidad, 
o corrección, antes de finalizar, y tal vez no sea interesante 
realizar un commit, pues nuestro código puede no estar funcionando 
aún. En este caso es interesante guardar el trabajo para poder 
volver a él después.
----------------------------------------------------
Guardar algo pero no quiero commitear 
--git stash , la guarda en un lugar temporal donde puedo recuperarla
despues 
Para usar esos datos de nuevo se debe de hacer lo siguiente . 
una opcion
--git stash list 
--git stash apply 0 (0 por que es el primer que agregue )
Con este metodo, seguiran los cambios en la lista de stash 

Por eso en la segunda opcion agarramos lo del stash a la carpeta que
queremos y luego la elimina del stash la informacion 
--git stash pop 

Para enviar las modifiaciones a nuestro servidor que creamos (remoto)
--git push servidorlocal master 
